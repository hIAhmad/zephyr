# Copyright (c) 2025 Siemens AG
#
# SPDX-License-Identifier: Apache-2.0

# This script generates a source file, that can be included by C source
# files to embed one or more specified binary data files. It is a helper
# script used by generate_binary_embed_inc_* CMake functions.

cmake_minimum_required(VERSION 3.20.0)

file(WRITE ${GENERATED_FILE} "/*\n"
                             " * Generated by gen_binary_embed_inc.cmake\n"
                             " */\n")

if(USE_INCBIN)
file(WRITE ${GENERATED_FILE}.S "/*\n"
                             " * Generated by gen_binary_embed_inc.cmake\n"
                             " */\n\n")
file(APPEND ${GENERATED_FILE}.S "#include <zephyr/toolchain.h>\n"
                                "#include <zephyr/linker/sections.h>\n")
endif()

if(${READONLY} STREQUAL yes)
  set(CONST "const ")
endif()

foreach(sym_name binary_file IN ZIP_LISTS SYMBOL_NAMES BINARY_FILES)
  # Generate an informational comment.
  file(APPEND ${GENERATED_FILE} "\n/* File: ${binary_file}\n"
                                  " */\n\n")
  if(USE_INCBIN)
    file(APPEND ${GENERATED_FILE}.S "\n/* File: ${binary_file} */\n")
  endif()

  cmake_path(IS_ABSOLUTE binary_file is_binary_file_absolute)
  if(NOT ${is_binary_file_absolute})
    string(PREPEND binary_file ${WORKING_DIRECTORY}/)
  endif()

  set(sym_size_name ${sym_name}_SIZE)

  # Emit data array size define.
  file(SIZE ${binary_file} bin_file_size_adjusted)
  if(OFFSET GREATER 0)
    math(EXPR bin_file_size_adjusted "${bin_file_size_adjusted} - ${OFFSET}")
  endif()
  if(LENGTH EQUAL -1 OR LENGTH GREATER ${bin_file_size_adjusted})
    set(bin_file_size ${bin_file_size_adjusted})
  else()
    set(bin_file_size ${LENGTH})
  endif()
  if(${ZIP} STREQUAL no)
    file(APPEND ${GENERATED_FILE} "\#define ${sym_size_name} ${bin_file_size}\n\n")
  else()
    get_filename_component(gen_dir ${GENERATED_FILE} DIRECTORY)
    file(SIZE ${gen_dir}/${sym_name}.inc bin_file_size_zipped)
    math(EXPR bin_file_size_zipped "(${bin_file_size_zipped} - 2) / 4")
    file(APPEND ${GENERATED_FILE} "\#define ${sym_size_name}_UNZIPPED ${bin_file_size}\n")
    file(APPEND ${GENERATED_FILE} "\#define ${sym_size_name} ${bin_file_size_zipped}\n\n")
  endif()

  # Include the binary data.
  if(USE_INCBIN)
    if("${SECTION}" STREQUAL "")
      if(${READONLY} STREQUAL yes)
        set(SECTION RODATA)
      else()
        set(SECTION DATA)
      endif()
    endif()

    # Use .incbin directive to embed the binary file.
    file(APPEND ${GENERATED_FILE} "extern ${CONST}uint8_t ${sym_name}[${sym_size_name}];\n")
    file(APPEND ${GENERATED_FILE}.S "GDATA(${sym_name})\n"
                                    "SECTION_VAR(${SECTION}, ${sym_name})\n"
                                    "\tALIGN(${ALIGNMENT})\n"
                                    "\t.incbin\t\"${binary_file}\"\n")
  else()
    # Define an array to include the binary data as array initializer or
    # string literal, generated in a prior build step.
    file(APPEND ${GENERATED_FILE} "${CONST}uint8_t ${sym_name}[${sym_size_name}] ")
    if(NOT "${SECTION}" STREQUAL "")
      file(APPEND ${GENERATED_FILE} "Z_GENERIC_DOT_SECTION(${SECTION}) ")
    endif()
    file(APPEND ${GENERATED_FILE} "__aligned(${ALIGNMENT}) = {\n"
                                  "\#include \"${sym_name}.inc\"\n"
                                  "};\n")
  endif()
endforeach()
